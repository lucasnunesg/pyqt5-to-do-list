# Importing all widgets used on the UI generated by PyQt5Designer
from PyQt5.QtWidgets import QMainWindow, QApplication, QLabel, QPushButton, QListWidget, QLineEdit, QMessageBox
from PyQt5 import uic
import sys
import sqlite3

# Create a database or connect to one that already exists
connector = sqlite3.connect('mylist.db')

# Create a cursor
cursor = connector.cursor()

# Create a table (if it does not exists
cursor.execute("""CREATE TABLE if not exists todo_list(
        list_item text)""")

connector.commit()
connector.close()

class UI(QMainWindow):
    def __init__(self):
        super(UI, self).__init__()

        # Load UI file
        uic.loadUi("to_do.ui", self)

        # Message pop ur box
        self.msg = QMessageBox()
        self.msg.setWindowTitle("Saved to Database!")
        self.msg.setText("Your Todo List has been successfully saved!")
        self.msg.setIcon(QMessageBox.Information)

        # Define widgets: make reference to the widget type and name found on *.ui file
        self.create_task_label = self.findChild(QLabel, "createtask_label")
        self.ongoing_tasks_label = self.findChild(QLabel, "ongoingtasks_label")
        self.lineedit = self.findChild(QLineEdit, "lineEdit")
        self.add_button = self.findChild(QPushButton, "additem_pushButton")
        self.delete_button = self.findChild(QPushButton, "deleteitem_pushButton_2")
        self.clear_button = self.findChild(QPushButton, "clearall_pushButton_3")
        self.list_widget = self.findChild(QListWidget, "mylist_listWidget")
        self.save_button = self.findChild(QPushButton, "save_pushButton_4")

        # Creating Functionality (linking the action (button clicked) to the function that defines what will be done)
        self.add_button.clicked.connect(self.add_item)
        self.delete_button.clicked.connect(self.delete_item)
        self.clear_button.clicked.connect(self.clear_all)
        self.save_button.clicked.connect(self.save_it)

        # Grab all items from database
        self.grab_all()

        # Show the app
        self.show()

    def add_item(self):
        """
        Adds item to the to-do list
        """
        item = self.lineedit.text()
        self.list_widget.addItem(item)
        self.lineedit.setText("")

    def delete_item(self):
        """
        Deletes item from the to-do list
        """
        selection = self.list_widget.currentRow()
        self.list_widget.takeItem(selection)

    def clear_all(self):
        """
        Clears all items from the to-do list
        """
        self.list_widget.clear()

    def save_it(self):
        """
        Saves the to-do list to the database
        """
        connector = sqlite3.connect('mylist.db')
        cursor = connector.cursor()

        # Store all tasks in a list
        items = [self.list_widget.item(i) for i in range(self.list_widget.count())]

        # Delete all items currently in database to avoid duplicates
        cursor.execute('DELETE FROM todo_list;',)

        for item in items:
            #print(item.text())
            # Add items to table
            cursor.execute("INSERT INTO todo_list VALUES (:item)",
                           {
                               'item': item.text(),
                           })
        connector.commit()
        connector.close()
        self.msg.exec_()


    def grab_all(self):
        """
        Function to grab all items from database
        """
        connector = sqlite3.connect('mylist.db')

        cursor = connector.cursor()

        cursor.execute("SELECT * FROM todo_list")
        records = cursor.fetchall()

        connector.commit()
        connector.close()

        # Loop through records to add to screen
        for record in records:
            self.list_widget.addItem(str(record[0]))


# Initialize the app
app = QApplication(sys.argv)
UIWindow = UI()
app.exec_()
